!(function(e, n) {
  'object' == typeof exports && 'undefined' != typeof module
    ? n(exports)
    : 'function' == typeof define && define.amd
    ? define(['exports'], n)
    : n(((e = e || self)['final-form-arrays'] = {}))
})(this, function(e) {
  'use strict'
  function o() {
    return (o =
      Object.assign ||
      function(e) {
        for (var n = 1; n < arguments.length; n++) {
          var f = arguments[n]
          for (var i in f)
            Object.prototype.hasOwnProperty.call(f, i) && (e[i] = f[i])
        }
        return e
      }).apply(this, arguments)
  }
  function d(e, n, f, i) {
    void 0 === i && (i = e),
      delete e.fields[n.name],
      (e.fields[f] = o({}, n, {
        name: f,
        change: i.fields[f] && i.fields[f].change,
        blur: i.fields[f] && i.fields[f].blur,
        focus: i.fields[f] && i.fields[f].focus,
        lastFieldState: void 0
      })),
      e.fields[f].change || delete e.fields[f].change,
      e.fields[f].blur || delete e.fields[f].blur,
      e.fields[f].focus || delete e.fields[f].focus
  }
  function v(e) {
    return e.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
  }
  function t(e, r, n) {
    var t = e[0],
      c = e[1],
      f = e[2],
      i = n.changeValue
    n.resetFieldState,
      i(r, t, function(e) {
        var n = [].concat(e || [])
        return n.splice(c, 0, f), n
      })
    var l = o({}, r.fields),
      a = new RegExp('^' + v(t) + '\\[(\\d+)\\](.*)')
    Object.keys(r.fields)
      .sort()
      .reverse()
      .forEach(function(e) {
        var n = a.exec(e)
        if (n) {
          var f = Number(n[1])
          if (c <= f) {
            var i = t + '[' + (f + 1) + ']' + n[2]
            d(r, l[e], i)
          }
        }
      })
  }
  function u(i, r, t, c) {
    Object.keys(c.fields).forEach(function(e) {
      if (e.substring(0, r.length) === r) {
        var n = e.substring(r.length),
          f = i + '[' + t + ']' + n
        d(c, c.fields[e], f)
      }
    })
  }
  function h(n, f) {
    Object.keys(n.fields).forEach(function(e) {
      ;(n.fields[e] = o({}, n.fields[e], {
        change: n.fields[e].change || (f.fields[e] && f.fields[e].change),
        blur: n.fields[e].blur || (f.fields[e] && f.fields[e].blur),
        focus: n.fields[e].focus || (f.fields[e] && f.fields[e].focus)
      })),
        n.fields[e].change || delete n.fields[e].change,
        n.fields[e].blur || delete n.fields[e].blur,
        n.fields[e].focus || delete n.fields[e].focus
    })
  }
  function r(e, r, n) {
    var f,
      t = e[0],
      c = e[1],
      i = n.changeValue,
      l = n.renameField
    i(r, t, function(e) {
      var n = [].concat(e || [])
      return (f = n[c]), n.splice(c, 1), n
    })
    var a = new RegExp('^' + v(t) + '\\[(\\d+)\\](.*)'),
      s = o({}, r, { fields: o({}, r.fields) })
    return (
      Object.keys(r.fields).forEach(function(e) {
        var n = a.exec(e)
        if (n) {
          var f = Number(n[1])
          if (f === c) delete r.fields[e]
          else if (c < f) {
            delete r.fields[e]
            var i = t + '[' + (f - 1) + ']' + n[2]
            s.fields[i] ? d(r, s.fields[e], i, s) : l(r, e, i)
          }
        }
      }),
      f
    )
  }
  var n = {
    insert: t,
    concat: function(e, n, f) {
      var i = e[0],
        r = e[1]
      ;(0, f.changeValue)(n, i, function(e) {
        return e ? [].concat(e, r) : r
      })
    },
    move: function(e, n, f) {
      var i = e[0],
        r = e[1],
        t = e[2],
        c = f.changeValue
      if (r !== t) {
        c(n, i, function(e) {
          var n = [].concat(e || []),
            f = n[r]
          return n.splice(r, 1), n.splice(t, 0, f), n
        })
        var l = o({}, n, { fields: o({}, n.fields) })
        if ((u(i, i + '[' + r + ']', 'tmp', n), r < t))
          for (var a = r + 1; a <= t; a++) {
            u(i, i + '[' + a + ']', '' + (a - 1), n)
          }
        else
          for (var s = r - 1; t <= s; s--) {
            u(i, i + '[' + s + ']', '' + (s + 1), n)
          }
        u(i, i + '[tmp]', t, n), h(n, l)
      }
    },
    pop: function(e, n, f) {
      var i,
        r,
        t = e[0]
      if (
        ((0, f.changeValue)(n, t, function(e) {
          if (e)
            return e.length
              ? ((r = e.length - 1), (i = e[r]), e.slice(0, r))
              : []
        }),
        void 0 !== r)
      ) {
        var c = new RegExp('^' + v(t) + '\\[' + r + '].*')
        Object.keys(n.fields).forEach(function(e) {
          c.test(e) && delete n.fields[e]
        })
      }
      return i
    },
    push: function(e, n, f) {
      var i = e[0],
        r = e[1]
      ;(0, f.changeValue)(n, i, function(e) {
        return e ? [].concat(e, [r]) : [r]
      })
    },
    remove: r,
    removeBatch: function(e, r, n) {
      var t = e[0],
        c = e[1],
        f = n.changeValue,
        l = [].concat(c)
      l.sort()
      for (var i = 0; i < l.length; i++)
        0 < i && l[i] === l[i - 1] && l.splice(i--, 1)
      var a = []
      f(r, t, function(n) {
        if (
          ((a = c.map(function(e) {
            return n && n[e]
          })),
          !n || !l.length)
        )
          return n
        var f = [].concat(n),
          i = []
        return (
          l.forEach(function(e) {
            f.splice(e - i.length, 1), i.push(n && n[e])
          }),
          f
        )
      })
      var s = new RegExp('^' + v(t) + '\\[(\\d+)\\](.*)'),
        u = o({}, r, { fields: {} })
      return (
        Object.keys(r.fields).forEach(function(e) {
          var n = s.exec(e)
          if (n) {
            var f = Number(n[1])
            if (!~l.indexOf(f)) {
              var i =
                t +
                '[' +
                (f -
                  (function(e, f) {
                    return e.reduce(function(e, n) {
                      return n < f ? e + 1 : e
                    }, 0)
                  })(l, f)) +
                ']' +
                n[2]
              d(u, r.fields[e], i, r)
            }
          } else u.fields[e] = r.fields[e]
        }),
        (r.fields = u.fields),
        a
      )
    },
    shift: function(e, n, f) {
      var i = e[0]
      return r([i, 0], n, f)
    },
    swap: function(e, n, f) {
      var i = e[0],
        r = e[1],
        t = e[2],
        c = f.changeValue
      if (r !== t) {
        c(n, i, function(e) {
          var n = [].concat(e || []),
            f = n[r]
          return (n[r] = n[t]), (n[t] = f), n
        })
        var l = o({}, n, { fields: o({}, n.fields) }),
          a = i + '[' + t + ']',
          s = i + '[tmp]'
        u(i, i + '[' + r + ']', 'tmp', n), u(i, a, r, n), u(i, s, t, n), h(n, l)
      }
    },
    duplicate: function(e, r, n) {
      var t = e[0],
        c = e[1]
      ;(0, n.changeValue)(r, t, function(e) {
        var n = [].concat(e || []),
          f = n[c]
        return n.splice(c + 1, 0, f), n
      })
      var l = o({}, r.fields),
        a = new RegExp('^' + v(t) + '\\[(\\d+)\\](.*)')
      Object.keys(r.fields)
        .sort()
        .reverse()
        .forEach(function(e) {
          var n = a.exec(e)
          if (n) {
            var f = Number(n[1])
            if (c <= f) {
              var i = t + '[' + (f + 1) + ']' + n[2]
              d(r, l[e], i)
            }
          }
        })
    },
    unshift: function(e, n, f) {
      var i = e[0],
        r = e[1]
      return t([i, 0, r], n, f)
    },
    update: function(e, n, f) {
      var i = e[0],
        r = e[1],
        t = e[2]
      ;(0, f.changeValue)(n, i, function(e) {
        var n = [].concat(e || [])
        return n.splice(r, 1, t), n
      })
    }
  }
  ;(e.default = n), Object.defineProperty(e, '__esModule', { value: !0 })
})
//# sourceMappingURL=final-form-arrays.umd.min.js.map
